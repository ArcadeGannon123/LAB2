// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: COM.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Aqui el cliente envia a un datanode los chunks de el libro que quiere subir
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`  //nombre del libro
	Data [][]byte `protobuf:"bytes,16,rep,name=Data,proto3" json:"Data,omitempty"` //chunks del libro
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chunk) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//Aqui los datanodes distribuyen los chunk que le corresponden a cada datanode
type ChunkDatanode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`      //nombre del libro
	Number int32    `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"` //numero del chunk inicial
	Data   [][]byte `protobuf:"bytes,17,rep,name=Data,proto3" json:"Data,omitempty"`     //chunks
}

func (x *ChunkDatanode) Reset() {
	*x = ChunkDatanode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkDatanode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDatanode) ProtoMessage() {}

func (x *ChunkDatanode) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDatanode.ProtoReflect.Descriptor instead.
func (*ChunkDatanode) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkDatanode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChunkDatanode) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChunkDatanode) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//aqui los datanodes responden a la peticion de distribucion
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta string `protobuf:"bytes,1,opt,name=Respuesta,proto3" json:"Respuesta,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetRespuesta() string {
	if x != nil {
		return x.Respuesta
	}
	return ""
}

//aqui los datanodes envian los datos para registrar en el namenode
type Registro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`        //nombre del libro
	Nchunks int32    `protobuf:"varint,2,opt,name=Nchunks,proto3" json:"Nchunks,omitempty"` //numero de chunks que componen el libro
	Chunks  []string `protobuf:"bytes,16,rep,name=Chunks,proto3" json:"Chunks,omitempty"`   //chunks del libro
}

func (x *Registro) Reset() {
	*x = Registro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registro) ProtoMessage() {}

func (x *Registro) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registro.ProtoReflect.Descriptor instead.
func (*Registro) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{3}
}

func (x *Registro) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Registro) GetNchunks() int32 {
	if x != nil {
		return x.Nchunks
	}
	return 0
}

func (x *Registro) GetChunks() []string {
	if x != nil {
		return x.Chunks
	}
	return nil
}

//aqui los datanode envian las proposiciones de distirbucion a los otros datanodes
type Propuesta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Propuesta) Reset() {
	*x = Propuesta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Propuesta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Propuesta) ProtoMessage() {}

func (x *Propuesta) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Propuesta.ProtoReflect.Descriptor instead.
func (*Propuesta) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{4}
}

//aqui los datanodes envian una proposicion de distribucion al namenode para que este la apruebe
type PropuestaNamenode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nchunks    int32   `protobuf:"varint,1,opt,name=Nchunks,proto3" json:"Nchunks,omitempty"`               // numero de chunks
	IDdatanode []int32 `protobuf:"varint,16,rep,packed,name=IDdatanode,proto3" json:"IDdatanode,omitempty"` // ids de los datanodes de la distribucion
}

func (x *PropuestaNamenode) Reset() {
	*x = PropuestaNamenode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropuestaNamenode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropuestaNamenode) ProtoMessage() {}

func (x *PropuestaNamenode) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropuestaNamenode.ProtoReflect.Descriptor instead.
func (*PropuestaNamenode) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{5}
}

func (x *PropuestaNamenode) GetNchunks() int32 {
	if x != nil {
		return x.Nchunks
	}
	return 0
}

func (x *PropuestaNamenode) GetIDdatanode() []int32 {
	if x != nil {
		return x.IDdatanode
	}
	return nil
}

//aqui el namenode envia la proposicion de distribucion a los datanodes
type RespuestaNamenode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDdatanode []int32 `protobuf:"varint,16,rep,packed,name=IDdatanode,proto3" json:"IDdatanode,omitempty"` // ids de los datanodes de la distribucion
}

func (x *RespuestaNamenode) Reset() {
	*x = RespuestaNamenode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespuestaNamenode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespuestaNamenode) ProtoMessage() {}

func (x *RespuestaNamenode) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespuestaNamenode.ProtoReflect.Descriptor instead.
func (*RespuestaNamenode) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{6}
}

func (x *RespuestaNamenode) GetIDdatanode() []int32 {
	if x != nil {
		return x.IDdatanode
	}
	return nil
}

//aqui los datanode envian una solicitud de acceso al registro al namenode
type Solicitud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDNodo int32 `protobuf:"varint,1,opt,name=IDNodo,proto3" json:"IDNodo,omitempty"` //id del solicitante
}

func (x *Solicitud) Reset() {
	*x = Solicitud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solicitud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solicitud) ProtoMessage() {}

func (x *Solicitud) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solicitud.ProtoReflect.Descriptor instead.
func (*Solicitud) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{7}
}

func (x *Solicitud) GetIDNodo() int32 {
	if x != nil {
		return x.IDNodo
	}
	return 0
}

//aqui el namenode responde a la peticion de acceso al registro
type ReplyNN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta string `protobuf:"bytes,1,opt,name=Respuesta,proto3" json:"Respuesta,omitempty"`
}

func (x *ReplyNN) Reset() {
	*x = ReplyNN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNN) ProtoMessage() {}

func (x *ReplyNN) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNN.ProtoReflect.Descriptor instead.
func (*ReplyNN) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{8}
}

func (x *ReplyNN) GetRespuesta() string {
	if x != nil {
		return x.Respuesta
	}
	return ""
}

//aqui el datanode envia una solicitud de acceso al registro a todos los demas datanodes
type SolicitudDistribuido struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp     int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`         //timestamp de la peticion
	IDSolicitante int32 `protobuf:"varint,2,opt,name=IDSolicitante,proto3" json:"IDSolicitante,omitempty"` //id del solicitante
}

func (x *SolicitudDistribuido) Reset() {
	*x = SolicitudDistribuido{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolicitudDistribuido) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolicitudDistribuido) ProtoMessage() {}

func (x *SolicitudDistribuido) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolicitudDistribuido.ProtoReflect.Descriptor instead.
func (*SolicitudDistribuido) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{9}
}

func (x *SolicitudDistribuido) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SolicitudDistribuido) GetIDSolicitante() int32 {
	if x != nil {
		return x.IDSolicitante
	}
	return 0
}

//aqui los datanodes responden a la peticion para acceder al registro
type RespuestaDistribuido struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta string `protobuf:"bytes,1,opt,name=respuesta,proto3" json:"respuesta,omitempty"`
}

func (x *RespuestaDistribuido) Reset() {
	*x = RespuestaDistribuido{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespuestaDistribuido) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespuestaDistribuido) ProtoMessage() {}

func (x *RespuestaDistribuido) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespuestaDistribuido.ProtoReflect.Descriptor instead.
func (*RespuestaDistribuido) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{10}
}

func (x *RespuestaDistribuido) GetRespuesta() string {
	if x != nil {
		return x.Respuesta
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{11}
}

//aqui el cliente envia el nombre del libro al namenode para conocer las ubicaciones de sus chunks
type Libro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"` //nombre del libro
}

func (x *Libro) Reset() {
	*x = Libro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Libro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Libro) ProtoMessage() {}

func (x *Libro) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Libro.ProtoReflect.Descriptor instead.
func (*Libro) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{12}
}

func (x *Libro) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//aqui el namenode envia las ubicaciones de los chunks del libro solicitado
type Ubicaciones struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ubicacion []string `protobuf:"bytes,16,rep,name=Ubicacion,proto3" json:"Ubicacion,omitempty"`
}

func (x *Ubicaciones) Reset() {
	*x = Ubicaciones{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ubicaciones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ubicaciones) ProtoMessage() {}

func (x *Ubicaciones) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ubicaciones.ProtoReflect.Descriptor instead.
func (*Ubicaciones) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{13}
}

func (x *Ubicaciones) GetUbicacion() []string {
	if x != nil {
		return x.Ubicacion
	}
	return nil
}

//aqui el cliente envia el nombre del chunk solicitado a un datanode
type ChunkName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ChunkName) Reset() {
	*x = ChunkName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkName) ProtoMessage() {}

func (x *ChunkName) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkName.ProtoReflect.Descriptor instead.
func (*ChunkName) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{14}
}

func (x *ChunkName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//aqui el datanode envia el chunk solicitado al cliente
type Descarga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Descarga) Reset() {
	*x = Descarga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Descarga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Descarga) ProtoMessage() {}

func (x *Descarga) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Descarga.ProtoReflect.Descriptor instead.
func (*Descarga) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{15}
}

func (x *Descarga) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//aqui el namenode envia la lista de libros disponibles al cliente
type Lista struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Libros []string `protobuf:"bytes,16,rep,name=Libros,proto3" json:"Libros,omitempty"`
}

func (x *Lista) Reset() {
	*x = Lista{}
	if protoimpl.UnsafeEnabled {
		mi := &file_COM_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lista) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lista) ProtoMessage() {}

func (x *Lista) ProtoReflect() protoreflect.Message {
	mi := &file_COM_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lista.ProtoReflect.Descriptor instead.
func (*Lista) Descriptor() ([]byte, []int) {
	return file_COM_proto_rawDescGZIP(), []int{16}
}

func (x *Lista) GetLibros() []string {
	if x != nil {
		return x.Libros
	}
	return nil
}

var File_COM_proto protoreflect.FileDescriptor

var file_COM_proto_rawDesc = []byte{
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x22, 0x50,
	0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x22, 0x0b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x22, 0x4d, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x44, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x44, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x44, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x44, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x23, 0x0a, 0x09, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x44, 0x4e, 0x6f, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x44, 0x4e, 0x6f, 0x64, 0x6f, 0x22, 0x27, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e,
	0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x22,
	0x5a, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x69, 0x64, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x44, 0x53, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x44,
	0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x69, 0x64, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74,
	0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x05, 0x4c, 0x69,
	0x62, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x0b, 0x55, 0x62, 0x69, 0x63, 0x61,
	0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x62, 0x69, 0x63, 0x61, 0x63,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x55, 0x62, 0x69, 0x63, 0x61,
	0x63, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x32, 0xc8, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x62, 0x69, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x69, 0x62, 0x69, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x4e, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x69, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x69, 0x64, 0x6f, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x69,
	0x64, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67,
	0x61, 0x32, 0xae, 0x02, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x62, 0x69, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x75, 0x65, 0x73, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x0f, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x6f,
	0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x75, 0x64, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x4e, 0x12, 0x36, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x64, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x1a, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x14, 0x53, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x72, 0x55, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x6f,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69,
	0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_COM_proto_rawDescOnce sync.Once
	file_COM_proto_rawDescData = file_COM_proto_rawDesc
)

func file_COM_proto_rawDescGZIP() []byte {
	file_COM_proto_rawDescOnce.Do(func() {
		file_COM_proto_rawDescData = protoimpl.X.CompressGZIP(file_COM_proto_rawDescData)
	})
	return file_COM_proto_rawDescData
}

var file_COM_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_COM_proto_goTypes = []interface{}{
	(*Chunk)(nil),                // 0: proto.Chunk
	(*ChunkDatanode)(nil),        // 1: proto.ChunkDatanode
	(*Response)(nil),             // 2: proto.Response
	(*Registro)(nil),             // 3: proto.Registro
	(*Propuesta)(nil),            // 4: proto.Propuesta
	(*PropuestaNamenode)(nil),    // 5: proto.PropuestaNamenode
	(*RespuestaNamenode)(nil),    // 6: proto.RespuestaNamenode
	(*Solicitud)(nil),            // 7: proto.Solicitud
	(*ReplyNN)(nil),              // 8: proto.ReplyNN
	(*SolicitudDistribuido)(nil), // 9: proto.SolicitudDistribuido
	(*RespuestaDistribuido)(nil), // 10: proto.RespuestaDistribuido
	(*Empty)(nil),                // 11: proto.Empty
	(*Libro)(nil),                // 12: proto.Libro
	(*Ubicaciones)(nil),          // 13: proto.Ubicaciones
	(*ChunkName)(nil),            // 14: proto.ChunkName
	(*Descarga)(nil),             // 15: proto.Descarga
	(*Lista)(nil),                // 16: proto.Lista
}
var file_COM_proto_depIdxs = []int32{
	0,  // 0: proto.DataNodeService.Upload:input_type -> proto.Chunk
	4,  // 1: proto.DataNodeService.RecibirPropuesta:input_type -> proto.Propuesta
	1,  // 2: proto.DataNodeService.RecibirChunks:input_type -> proto.ChunkDatanode
	8,  // 3: proto.DataNodeService.Turno:input_type -> proto.ReplyNN
	9,  // 4: proto.DataNodeService.PermitirAcceso:input_type -> proto.SolicitudDistribuido
	14, // 5: proto.DataNodeService.Download:input_type -> proto.ChunkName
	5,  // 6: proto.NameNodeService.RecibirPropuesta:input_type -> proto.PropuestaNamenode
	7,  // 7: proto.NameNodeService.SolicitarAcceso:input_type -> proto.Solicitud
	3,  // 8: proto.NameNodeService.RegistrarCentralizado:input_type -> proto.Registro
	12, // 9: proto.NameNodeService.SolicitarUbicaciones:input_type -> proto.Libro
	11, // 10: proto.NameNodeService.SolicitarLista:input_type -> proto.Empty
	2,  // 11: proto.DataNodeService.Upload:output_type -> proto.Response
	2,  // 12: proto.DataNodeService.RecibirPropuesta:output_type -> proto.Response
	11, // 13: proto.DataNodeService.RecibirChunks:output_type -> proto.Empty
	11, // 14: proto.DataNodeService.Turno:output_type -> proto.Empty
	10, // 15: proto.DataNodeService.PermitirAcceso:output_type -> proto.RespuestaDistribuido
	15, // 16: proto.DataNodeService.Download:output_type -> proto.Descarga
	6,  // 17: proto.NameNodeService.RecibirPropuesta:output_type -> proto.RespuestaNamenode
	8,  // 18: proto.NameNodeService.SolicitarAcceso:output_type -> proto.ReplyNN
	11, // 19: proto.NameNodeService.RegistrarCentralizado:output_type -> proto.Empty
	13, // 20: proto.NameNodeService.SolicitarUbicaciones:output_type -> proto.Ubicaciones
	16, // 21: proto.NameNodeService.SolicitarLista:output_type -> proto.Lista
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_COM_proto_init() }
func file_COM_proto_init() {
	if File_COM_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_COM_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkDatanode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Propuesta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropuestaNamenode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespuestaNamenode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solicitud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolicitudDistribuido); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespuestaDistribuido); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Libro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ubicaciones); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Descarga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_COM_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lista); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_COM_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_COM_proto_goTypes,
		DependencyIndexes: file_COM_proto_depIdxs,
		MessageInfos:      file_COM_proto_msgTypes,
	}.Build()
	File_COM_proto = out.File
	file_COM_proto_rawDesc = nil
	file_COM_proto_goTypes = nil
	file_COM_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	Upload(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Response, error)
	RecibirPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Response, error)
	RecibirChunks(ctx context.Context, in *ChunkDatanode, opts ...grpc.CallOption) (*Empty, error)
	Turno(ctx context.Context, in *ReplyNN, opts ...grpc.CallOption) (*Empty, error)
	PermitirAcceso(ctx context.Context, in *SolicitudDistribuido, opts ...grpc.CallOption) (*RespuestaDistribuido, error)
	Download(ctx context.Context, in *ChunkName, opts ...grpc.CallOption) (*Descarga, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) Upload(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) RecibirPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/RecibirPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) RecibirChunks(ctx context.Context, in *ChunkDatanode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/RecibirChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) Turno(ctx context.Context, in *ReplyNN, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/Turno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) PermitirAcceso(ctx context.Context, in *SolicitudDistribuido, opts ...grpc.CallOption) (*RespuestaDistribuido, error) {
	out := new(RespuestaDistribuido)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/PermitirAcceso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) Download(ctx context.Context, in *ChunkName, opts ...grpc.CallOption) (*Descarga, error) {
	out := new(Descarga)
	err := c.cc.Invoke(ctx, "/proto.DataNodeService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
type DataNodeServiceServer interface {
	Upload(context.Context, *Chunk) (*Response, error)
	RecibirPropuesta(context.Context, *Propuesta) (*Response, error)
	RecibirChunks(context.Context, *ChunkDatanode) (*Empty, error)
	Turno(context.Context, *ReplyNN) (*Empty, error)
	PermitirAcceso(context.Context, *SolicitudDistribuido) (*RespuestaDistribuido, error)
	Download(context.Context, *ChunkName) (*Descarga, error)
}

// UnimplementedDataNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (*UnimplementedDataNodeServiceServer) Upload(context.Context, *Chunk) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedDataNodeServiceServer) RecibirPropuesta(context.Context, *Propuesta) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirPropuesta not implemented")
}
func (*UnimplementedDataNodeServiceServer) RecibirChunks(context.Context, *ChunkDatanode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirChunks not implemented")
}
func (*UnimplementedDataNodeServiceServer) Turno(context.Context, *ReplyNN) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turno not implemented")
}
func (*UnimplementedDataNodeServiceServer) PermitirAcceso(context.Context, *SolicitudDistribuido) (*RespuestaDistribuido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermitirAcceso not implemented")
}
func (*UnimplementedDataNodeServiceServer) Download(context.Context, *ChunkName) (*Descarga, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterDataNodeServiceServer(s *grpc.Server, srv DataNodeServiceServer) {
	s.RegisterService(&_DataNodeService_serviceDesc, srv)
}

func _DataNodeService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).Upload(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_RecibirPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).RecibirPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/RecibirPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).RecibirPropuesta(ctx, req.(*Propuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_RecibirChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkDatanode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).RecibirChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/RecibirChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).RecibirChunks(ctx, req.(*ChunkDatanode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_Turno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyNN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).Turno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/Turno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).Turno(ctx, req.(*ReplyNN))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_PermitirAcceso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudDistribuido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).PermitirAcceso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/PermitirAcceso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).PermitirAcceso(ctx, req.(*SolicitudDistribuido))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataNodeService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).Download(ctx, req.(*ChunkName))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _DataNodeService_Upload_Handler,
		},
		{
			MethodName: "RecibirPropuesta",
			Handler:    _DataNodeService_RecibirPropuesta_Handler,
		},
		{
			MethodName: "RecibirChunks",
			Handler:    _DataNodeService_RecibirChunks_Handler,
		},
		{
			MethodName: "Turno",
			Handler:    _DataNodeService_Turno_Handler,
		},
		{
			MethodName: "PermitirAcceso",
			Handler:    _DataNodeService_PermitirAcceso_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _DataNodeService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "COM.proto",
}

// NameNodeServiceClient is the client API for NameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameNodeServiceClient interface {
	RecibirPropuesta(ctx context.Context, in *PropuestaNamenode, opts ...grpc.CallOption) (*RespuestaNamenode, error)
	SolicitarAcceso(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*ReplyNN, error)
	RegistrarCentralizado(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Empty, error)
	SolicitarUbicaciones(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*Ubicaciones, error)
	SolicitarLista(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Lista, error)
}

type nameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeServiceClient(cc grpc.ClientConnInterface) NameNodeServiceClient {
	return &nameNodeServiceClient{cc}
}

func (c *nameNodeServiceClient) RecibirPropuesta(ctx context.Context, in *PropuestaNamenode, opts ...grpc.CallOption) (*RespuestaNamenode, error) {
	out := new(RespuestaNamenode)
	err := c.cc.Invoke(ctx, "/proto.NameNodeService/RecibirPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) SolicitarAcceso(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*ReplyNN, error) {
	out := new(ReplyNN)
	err := c.cc.Invoke(ctx, "/proto.NameNodeService/SolicitarAcceso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) RegistrarCentralizado(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.NameNodeService/RegistrarCentralizado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) SolicitarUbicaciones(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*Ubicaciones, error) {
	out := new(Ubicaciones)
	err := c.cc.Invoke(ctx, "/proto.NameNodeService/SolicitarUbicaciones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) SolicitarLista(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Lista, error) {
	out := new(Lista)
	err := c.cc.Invoke(ctx, "/proto.NameNodeService/SolicitarLista", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServiceServer is the server API for NameNodeService service.
type NameNodeServiceServer interface {
	RecibirPropuesta(context.Context, *PropuestaNamenode) (*RespuestaNamenode, error)
	SolicitarAcceso(context.Context, *Solicitud) (*ReplyNN, error)
	RegistrarCentralizado(context.Context, *Registro) (*Empty, error)
	SolicitarUbicaciones(context.Context, *Libro) (*Ubicaciones, error)
	SolicitarLista(context.Context, *Empty) (*Lista, error)
}

// UnimplementedNameNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNameNodeServiceServer struct {
}

func (*UnimplementedNameNodeServiceServer) RecibirPropuesta(context.Context, *PropuestaNamenode) (*RespuestaNamenode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirPropuesta not implemented")
}
func (*UnimplementedNameNodeServiceServer) SolicitarAcceso(context.Context, *Solicitud) (*ReplyNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarAcceso not implemented")
}
func (*UnimplementedNameNodeServiceServer) RegistrarCentralizado(context.Context, *Registro) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarCentralizado not implemented")
}
func (*UnimplementedNameNodeServiceServer) SolicitarUbicaciones(context.Context, *Libro) (*Ubicaciones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarUbicaciones not implemented")
}
func (*UnimplementedNameNodeServiceServer) SolicitarLista(context.Context, *Empty) (*Lista, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarLista not implemented")
}

func RegisterNameNodeServiceServer(s *grpc.Server, srv NameNodeServiceServer) {
	s.RegisterService(&_NameNodeService_serviceDesc, srv)
}

func _NameNodeService_RecibirPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropuestaNamenode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).RecibirPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NameNodeService/RecibirPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).RecibirPropuesta(ctx, req.(*PropuestaNamenode))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_SolicitarAcceso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).SolicitarAcceso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NameNodeService/SolicitarAcceso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).SolicitarAcceso(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_RegistrarCentralizado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).RegistrarCentralizado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NameNodeService/RegistrarCentralizado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).RegistrarCentralizado(ctx, req.(*Registro))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_SolicitarUbicaciones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Libro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).SolicitarUbicaciones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NameNodeService/SolicitarUbicaciones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).SolicitarUbicaciones(ctx, req.(*Libro))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_SolicitarLista_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).SolicitarLista(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NameNodeService/SolicitarLista",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).SolicitarLista(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NameNodeService",
	HandlerType: (*NameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecibirPropuesta",
			Handler:    _NameNodeService_RecibirPropuesta_Handler,
		},
		{
			MethodName: "SolicitarAcceso",
			Handler:    _NameNodeService_SolicitarAcceso_Handler,
		},
		{
			MethodName: "RegistrarCentralizado",
			Handler:    _NameNodeService_RegistrarCentralizado_Handler,
		},
		{
			MethodName: "SolicitarUbicaciones",
			Handler:    _NameNodeService_SolicitarUbicaciones_Handler,
		},
		{
			MethodName: "SolicitarLista",
			Handler:    _NameNodeService_SolicitarLista_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "COM.proto",
}
